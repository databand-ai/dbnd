apply plugin: 'scala'
apply plugin: 'application'

mainClassName = "ai.databand.examples.ScalaSparkPipeline"

repositories {
    mavenLocal()
    maven {
        url "https://conjars.org/repo"
    }
}

dependencies {
    implementation "com.squareup.retrofit2:retrofit:2.9.0"
    implementation 'com.squareup.okhttp3:okhttp:4.10.0'
    implementation("com.squareup.retrofit2:converter-jackson:2.9.0") {
        transitive = false
    }
    compileOnly("com.fasterxml.jackson.core:jackson-databind:2.14.1") {
        transitive = false
    }

    implementation 'org.mlflow:mlflow-client:1.5.0'
    implementation('org.apache.spark:spark-sql_2.11:2.4.8') {
        exclude group: 'org.slf4j', module: 'slf4j-log4j12'
    }
        constraints {
        implementation('org.codehaus.jettison:jettison:1.5.2') {
            because 'Jettison before v1.5.2 was discovered to contain a stack overflow via the map parameter. This vulnerability allows attackers to cause a Denial of Service (DoS) via a crafted string.'
        }
    }

    // fix for "Illegal pattern component: XXX" on spark read
    implementation 'org.apache.commons:commons-lang3:3.5'

    // Hive libs for local testing
//    implementation 'org.apache.spark:spark-hive_2.11:2.4.8'
//    implementation 'org.apache.hive.hcatalog:hive-hcatalog-core:2.3.7'
//    implementation 'org.apache.hadoop:hadoop-common:2.7.7'
//
//    configurations.all {
//        exclude group: 'org.pentaho', module: 'pentaho-aggdesigner-algorithm'
//    }
    // End Hive libs for local testing
    // Hive libs for AWS HCatalog PoC
    /**
     * Download libraries from
     * https://databand-playground.s3.amazonaws.com/emr-hive/emrfs-hadoop-assembly-2.46.0.jar
     * https://databand-playground.s3.amazonaws.com/emr-hive/hadoop-common-2.10.1-amzn-1.jar
     * and put them into the dbnd-examples/lib folder
     */
//    implementation files('lib/emrfs-hadoop-assembly-2.46.0.jar')
//    implementation files('lib/hadoop-common-2.10.1-amzn-1.jar')
//    implementation 'org.apache.hadoop:hadoop-aws:2.10.1'
    // end Hive Metastore PoC deps

    implementation("com.amazon.deequ:deequ:1.2.2-spark-2.2") {
        exclude group: "org.apache.spark"
        exclude group: "org.scala-lang"
        exclude group: "org.scalanlp"
    }
    implementation("com.fasterxml.jackson.module:jackson-module-scala_2.11:2.14.1")
    implementation 'org.scala-lang:scala-library:2.11.12'


    testImplementation "ai.databand:dbnd-client:${project.version}"
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.2'
    testImplementation 'org.hamcrest:hamcrest:2.2'
}

/**
 * ****************************************************************************
 * We don't want all transitive dependencies to be included into fatjar.
 * Spark is provided dependency and we need to include only databand, retrofit,
 * slf4j and javassist.
 * ****************************************************************************
 */
shadowJar {
    dependencies {
        exclude(dependency {
            !it.moduleGroup.contains('databand') \
         && !it.moduleGroup.contains('squareup') \
         && !it.moduleGroup.contains('ch.qos') \
         && !it.moduleGroup.contains('deequ')
         && !it.moduleGroup.contains("org.jetbrains.kotlin")
        })
    }
    relocate 'okio', 'ai.databand.shadow.okio'
    relocate 'okhttp3', 'ai.databand.shadow.okhttp3'
    relocate "kotlin", "ai.databand.shadow.kotlin"
}

test {
    useJUnitPlatform()
    environment "dbnd.tracking.log_value_preview", "True"
    environment "dbnd.tracking", "True"
    environment "dbnd.log.preview_head_bytes", "100000000"
    environment "dbnd.log.preview_tail_bytes", "100000000"
    jvmArgs "-javaagent:${projectDir}/../dbnd-agent/build/libs/dbnd-agent-${rootProject.version}-all.jar"
    environment "EXAMPLES_JAR", "${projectDir}/build/libs/dbnd-examples-latest-all.jar"
    environment "PROCESS_DATA_OUTPUT", "${buildDir}/output/"
    environment("AGENT_JAR", "${projectDir}/../dbnd-agent/build/libs/dbnd-agent-${rootProject.version}-all.jar")
}
